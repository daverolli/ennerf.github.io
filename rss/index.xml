<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Software for Robots]]></title><description><![CDATA[Real-Time Control, Networking, Operating Systems, Languages]]></description><link>https://ennerf.github.io</link><image><url>https://raw.githubusercontent.com/ennerf/ennerf.github.io/master/images/cover-image.jpg</url><title>Software for Robots</title><link>https://ennerf.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Fri, 26 Aug 2016 02:29:55 GMT</lastBuildDate><atom:link href="https://ennerf.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Latency : Operating Systems]]></title><description><![CDATA[<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
TODO: should this blog be about real-time control or on latency with a focus on robotics (motivation section)?
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Robotic systems tend to be controlled in <em>real-time</em>, which means that a command gets executed within a <em>deadline</em> (fixed period of time). There are <em>hard real-time</em> systems that can never exceed the given deadline, and <em>soft real-time</em> systems that are able to occasionally handle reasonable outliers.</p>
</div>
<div class="paragraph">
<p>Although there is a lot of information on the theoretial definition of these terms, it can be challenging to determine reasonable deadlines for a practical application. This is especially true for research environments that build unique mechanisms.</p>
</div>
<div class="paragraph">
<p>Unfortunately, the control scheme is a systemic concern that can impact the entire system architecture. This can be very difficult to change later on, so there is a tendency towards high requirements with regards to determinism. However, requirements that are too high can result in significant development efforts that may not yield any benefits in the real world.</p>
</div>
<div class="paragraph">
<p>There is also a lot of folklore about the reliablity and performance of various components. I have been in countless debates where people have tried to convince me that a proposed system has no chance of working, not knowing that it had already been implemented and been running without issues. This is partly because there is very little useful data on latency out there. Most benchmarks focus only on throughput, and some that do include latency were measured incorrectly.</p>
</div>
<div class="paragraph">
<p>Over a series of blog posts, I&#8217;ll try to share some my own experiences and data sets. Today&#8217;s post will focus on operating systems.</p>
</div>
<div class="sect2">
<h3 id="_measuring_latency">Measuring Latency</h3>
<div class="paragraph">
<p>The first important realization when looking at latency is that data is not normally (Gaussian) distributed. I have seen many data sets where the worst observed case was more than 1000 standard deviations away from the mean. Looking at only the mean and standard deviation tends to provide an extremely optimistic view that can be misleading.</p>
</div>
<div class="paragraph">
<p>A better way to look at latency is via histograms and percentile plots, e.g., 99.9% of measurements have been below Xms. Since there are already several blog posts and videos about recording latency, I&#8217;d encourage you to refer to the links below for more information,</p>
</div>
<div class="paragraph">
<p><a href="http://psy-lob-saw.blogspot.com/2015/02/hdrhistogram-better-latency-capture.htm">Nitsan Wakart</a></p>
</div>
<div class="paragraph">
<p><a href="http://latencytipoftheday.blogspot.com/">Gil Tene</a></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_operating_systems">Operating Systems</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The operating system is the base of everything. No matter how amazing the software stack is, the system is fundamentally bound by the capabilities of the OS, it&#8217;s scheduler, and the overall load on the system.</p>
</div>
<div class="paragraph">
<p>There is a trade-off between responding in a timely manner and overall performance, battery life, and many other concerns. As a result, the major consumer operating systems don&#8217;t guarantee to meet hard deadlines and can theoretically have arbitrarily long pauses.</p>
</div>
<div class="paragraph">
<p>However, before dismissing consumer OS for real-time control systems, it is worth looking at their actual performance. Even though there are no theoretical guarantees, the practical performance may be good enough for many applications.</p>
</div>
<div class="sect2">
<h3 id="_benchmark_setup">Benchmark Setup</h3>
<div class="paragraph">
<p><a href="https://www.azul.com">Azul Systems</a> sells products targeted at latency critical applications and they have created a variety of useful tools to measure latency. <a href="https://www.azul.com/jhiccup/">jHiccup</a> is a tool that allows us to measure and record hiccups (~jitter) at the OS level. By running it on an idle system, we can measure the best case scenario. It uses <a href="https://github.com/HdrHistogram/HdrHistogram">HdrHistogram</a> for the actual recording of samples. Lastly, I&#8217;m using <a href="https://github.com/ennerf/HdrHistogramVisualizer">HdrHistogramVisualizer</a> which is a tool that I&#8217;ve written for visualizing the recorded data.</p>
</div>
<div class="paragraph">
<p>Hiccups can be caused by a large number of reasons, including scheduling, paging, indexing, and many more. jHiccup measures the time for sleep(1ms) and records the delta to the fastest previously recorded sample. For example, if the fastest sample was 1ms, but it took 3ms to wake up, it will record a 2ms hiccup value.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve setup two standard desktop computers, one for Windows/Linux and one for Mac tests.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Windows/Linux</dt>
<dd>
<p>Gigabyte Brix BXi7-4770R, i7-4770R @ 3.2 GHz, 16 GB 1600 MHz DDR3</p>
</dd>
<dt class="hdlist1">Mac</dt>
<dd>
<p>Mac Mini 2014, i7-3720QM @ 2.6 GHz, 16 GB 1600 MHz DDR3</p>
</dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="_windows_mac_linux">Windows / Mac / Linux</h3>
<div class="paragraph">
<p>Let&#8217;s first look at the performance of consumer operating systems: Windows, Mac and Linux. Each test started off with a clean install for each OS. The only two modifications to the stock installation were to disable sleep mode and to install JDK8 (update 101) to run jHiccup. I then started the test, unplugged all external cables and let the computer sit 'idle' for &gt;24 hours.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Windows</dt>
<dd>
<p>Windows 10 Enterprise, version 1511 (OS build: 10586.545)</p>
</dd>
<dt class="hdlist1">Mac</dt>
<dd>
<p>OS X, version 10.9.5</p>
</dd>
<dt class="hdlist1">Linux</dt>
<dd>
<p>Ubuntu 16.04 Desktop, kernel 4.4.0-31-generic</p>
</dd>
<dt class="hdlist1">RT Linux</dt>
<dd>
<p>Scientific Linux 6.6, kernel 3.10.0-327.rt56.194.el6rt.x86_64</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>The charts below are split into two sections. The top one shows the worst hiccup that occured within given time intervals. The bottom one shows the percentiles of all measurements across the entire duration.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/images/os/osx-win-ubuntu_24h.png"><img src="https://ennerf.github.io/images/os/osx-win-ubuntu_24h.png" alt="osx win ubuntu 24h.png" width="osx windows ubuntu latency over 24 hours"></a>
</div>
</div>
<div class="paragraph">
<p>Up to the 90th percentile all three systems respond relatively similarly.</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<colgroup>
<col style="width: 16.6666%;">
<col style="width: 16.6666%;">
<col style="width: 16.6666%;">
<col style="width: 16.6666%;">
<col style="width: 16.6666%;">
<col style="width: 16.667%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Samples</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Mean</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>StdDev</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Max</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>(max-mean) /stddev</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Windows 10</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">80,304,595</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.55 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.37</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">17.17 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">44.9</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>OSX 10.9.5</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">65,282,969</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.32 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.03</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">12.65 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">411</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Ubuntu 16.04</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">78,039,162</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.10 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.01</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">3.03 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">293</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Scientific Linux 6.6-rt</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">79.753.643</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.08 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.01</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.15 ms</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">7</p></td>
</tr>
</tbody>
</table>
<div class="imageblock">
<div class="content">
<a class="image" href="/images/os/osx-win-ubuntu_10m.png"><img src="https://ennerf.github.io/images/os/osx-win-ubuntu_10m.png" alt="osx windows ubuntu latency over 10 minutes"></a>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_linux_with_rt_preempt">Linux with RT_PREEMPT</h3>
<div class="paragraph">
<p>Untuned systems aren&#8217;t good enough for 1KHz control. Describe Linux setup: SCL6, RT kernel, basic optimizations, highest priority.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/images/os/ubuntu-scl_24h.png"><img src="https://ennerf.github.io/images/os/ubuntu-scl_24h.png" alt="ubuntu scientific linux latency over 24 hours"></a>
</div>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/images/os/ubuntu-scl_10m.png"><img src="https://ennerf.github.io/images/os/ubuntu-scl_10m.png" alt="ubuntu scientific linux latency over 10 minutes"></a>
</div>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/images/os/scl_24h.png"><img src="https://ennerf.github.io/images/os/scl_24h.png" alt="scientific linux latency over 24 hours"></a>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It&#8217;s easy to do 100 Hz control in just about any OS. 1KHz hard real-time requires lots of tuning. Rates are highly dependent on the application. Hard to generalize.</p>
</div>
</div>
</div>]]></description><link>https://ennerf.github.io/2016/08/24/Latency-Operating-Systems.html</link><guid isPermaLink="true">https://ennerf.github.io/2016/08/24/Latency-Operating-Systems.html</guid><category><![CDATA[jHiccup]]></category><category><![CDATA[ Latency]]></category><category><![CDATA[ Sleep]]></category><category><![CDATA[ Operating System]]></category><category><![CDATA[ Windows]]></category><category><![CDATA[ OSX]]></category><category><![CDATA[ Ubuntu]]></category><category><![CDATA[ Scientific Linux]]></category><category><![CDATA[ Real-Time]]></category><category><![CDATA[ Control]]></category><dc:creator><![CDATA[Florian Enner]]></dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[First Post]]></title><description><![CDATA[<div class="sect1">
<h2 id="_first_heading">First heading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>text</p>
</div>
</div>
</div>]]></description><link>https://ennerf.github.io/2016/08/23/First-Post.html</link><guid isPermaLink="true">https://ennerf.github.io/2016/08/23/First-Post.html</guid><dc:creator><![CDATA[Florian Enner]]></dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[2nd Post]]></title><description><![CDATA[<div class="sect1">
<h2 id="_2nd_header">2nd Header</h2>
<div class="sectionbody">
<div class="paragraph">
<p>second text</p>
</div>
</div>
</div>]]></description><link>https://ennerf.github.io/2016/08/23/2nd-Post.html</link><guid isPermaLink="true">https://ennerf.github.io/2016/08/23/2nd-Post.html</guid><dc:creator><![CDATA[Florian Enner]]></dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 GMT</pubDate></item></channel></rss>